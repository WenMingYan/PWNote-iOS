#!/usr/bin/env ruby
require 'FileUtils'
require './color'
require './diff'

def install(path, to)
  if path == nil || path == '--help'
    usage
    return
  end

  css_file = File.join(path, 'iconfont.css')
  if !File.exists?(css_file)
    raise "Unexpected icon font folder"
  end

  fonts = []
  css = File.open(css_file).read
  css.gsub!(/\r\n?/, "\n")
  css.each_line do |line|
    if line.start_with?('.icon-')
      font = parse_font(line)
      puts font
      fonts.push(font)
    end
  end

  temp = File.join(to, '../IconFont-gen')
  check_target(temp)

  puts "Generate AMIconfont.h".yellow
  save_h(temp, fonts)

  puts "Generate AMIconfont.m".yellow
  save_m(temp, fonts)

  puts "Generate AMIconfont.js".yellow
  save_js(temp, fonts)

  if (diff(to, temp)) || path == to then
    puts "Apply changes".yellow
    copy_source(temp, to)
  end

  FileUtils.remove_dir(temp)

  if (path != to) then
    puts "Copy sources".yellow
    check_target(to)
    copy_source(path, to)
  end

  puts
  puts "    [!] Done.".green
  puts
end

def parse_font(line)
  line = line[1..-1]
  chars = line.chars
  len = chars.count - 1
  font_name = ""
  font_code = ""
  font_symbol = ""
  capital = false
  got_symbol = false

  for i in 0..len
    c = chars[i]
    c_name = c
    if c == '_' or c == '-'
      capital = true
      if c == '-'
        got_symbol = true
      end
      next
    elsif c == ':'
      break
    else
      if capital
        c_name = c_name.upcase
        capital = false
      end
    end
    
    if got_symbol
      font_symbol << c
    end
    font_name << c_name
  end

  for j in i..len
    if chars[j] == '\\' 
      break
    end
  end

  font_code = line[j+1..j+4]
  puts line
  new_name = 'XI' + font_name[1..-1]
  {name: font_name, code: font_code, new_name: new_name, symbol: font_symbol}
end

def save_h(path, fonts)
  h = File.join(path, 'AMIconfont.h')
  File.open(h, 'w') { |f|
    f.write copyright
    f.write '''#import <UIKit/UIKit.h>
#import "AMButtonFactory.h"

// 对应html文件保存在工程根目录 Iconfont Doc 目录下

@interface AMIconfont : NSObject

+ (UIFont *)fontWithSize:(CGFloat)size;

+ (NSString *)iconFromSymbol:(NSString *)symbol;

'''
    
    fonts.each { |font|
      f.write "+ (NSString *)#{font[:name]} __deprecated_msg(\"Use #{font[:new_name]} instead.\");\n"
    }

    f.write "\n@end\n\n"
    
    # extern
    fonts.each { |font|
      f.write "UIKIT_EXTERN NSString *const #{font[:new_name]};\n"
    }

    # symbol
    f.write '''
/**
 根据符号名获取 IconFont Unicode

 @param symbol 符号名
 @return 找不到返回 nil, 否则返回相应的 unicode
 */
UIKIT_STATIC_INLINE NSString *XIconFromSymbol(NSString *symbol) {
    return [AMIconfont iconFromSymbol:symbol];
}
'''
  }
end

def save_m(path, fonts)
  m = File.join(path, 'AMIconfont.m')
  File.open(m, 'w') { |f|
    f.write copyright
    f.write '#import "AMIconfont.h"'
    f.write "\n\n"

    fonts.each { |font| 
      f.write "NSString *const #{font[:new_name]} = @\"\\U0000#{font[:code]}\";\n"
    }

    f.write '''
@implementation AMIconfont

- (id)init {
  NSAssert(false, @"This class cannot be initialized. Never do it!");
  return nil;
}

+ (UIFont *)fontWithSize:(CGFloat)size {
  return [UIFont fontWithName:@"iconfont" size:size];
}
'''

    # Symbol
    f.write '''
+ (NSString *)iconFromSymbol:(NSString *)symbol {
  if (symbol == nil) return nil;

  static NSDictionary *symbolIcons = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    symbolIcons = @{
'''
    
    fonts.each { |font|
      f.write "      @\"#{font[:symbol]}\": #{font[:new_name]},\n"
    }

    f.write '''    };
  });
  return symbolIcons[symbol];
}

'''

    # Icon getter
    fonts.each { |font|
      f.write "+ (NSString *)#{font[:name]} { return #{font[:new_name]}; }\n"
    }

    f.write "\n@end"
  }
end

def save_js(path, fonts)
  js = File.join(path, 'AMIconfont.js')
  File.open(js, 'w') { |f|
    f.write copyright
    f.write "'use strict'\n"
    
    fonts.each { |font|
      f.write "export const #{font[:name]} = #{font[:code]};\n"
    }
  }
end

def copy_source(from, to)
  FileUtils.cp_r("#{from}/.", to)
end

def copyright()
"""/**
 * Auto-generated by `./install` on #{Time.now.strftime("%m/%d/%Y")}
 * Copyright © 2017 galen. App rights reserved.
 */

"""
end

def check_target(path)
  if !File.exists?(path)
    Dir.mkdir(path)
  end
end

def usage
  puts "Usage:".underline
  puts
  puts "    $ #{'./install SOURCE_PATH'.green}"
  puts
  puts "        从 #{'SOURCE_PATH'.green} (下载解压的源文件) 安装 IconFont"
  puts '        这个步骤将会生成必要的文件覆盖到 IconFont 目录下'

  puts "Options:".underline
  puts
  puts "    #{'--help'.blue}\t显示帮助"
end

path = ARGV[0]
path = File.join(Dir.pwd, 'AMIconfont') if path == nil
to = File.join(Dir.pwd, 'AMIconfont')
install path, to